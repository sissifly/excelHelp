const fs = require('fs')
const XLSX = require('xlsx')
const R = require('ramda')

// 读取数据范围
const range = { start: ['A', 4], end: ['J', Infinity]}

function inRange(pos) {
  const row = getRow(pos)
  const col = /^[A-Z]+/.exec(pos)[0]

  return row >= range.start[1]
    && row <= range.end[1]
    && col >= range.start[0]
    && col <= range.end[0]
}

function getRow(pos) {
  return /\d+$/.exec(pos)[0]
}

// 返回一个sheet中，在range定义内的数据，并把文件名添加到最后一列
// [
//  [ 20929393, '张三', '开发', 10, './samples/20174001.xlsx' ],
//  [ 20925556, '张三', '开发', 10, './samples/20174001.xlsx' ]
// ]
function getSheetData(sheet, fileName) {
  return R.pipe(
    R.pickBy((val, key) => (/^[A-Z]+\d+$/.test(key) && inRange(key))),  // 去除范围外或特殊属性数据
    R.toPairs,                                                          // 转换格式为序对[A1, { v: xxx }]
    R.groupBy(([pos]) => getRow(pos)),                                  // 按行分组 { 1: [[A1, { v: xxx }]]}
    R.values,                                                           // 取出值
    R.map(R.map(R.nth(1))),                                             // 丢掉位置信息[{ v: xxx }]
    R.map(R.map(R.prop('v'))),                                          // 取 v  [xxx]
    R.map(R.concat(R.__, [fileName])),                                  // 添加文件路径 [xxx..., './samples/20174002.xlsx']
  )(sheet)
}

const mapIndexed = R.addIndex(R.map)
const mapKeys = R.curry((fn, obj) => R.zipObj(R.map(fn, R.keys(obj)), R.values(obj)))

// 读取第二标sheet，默认写入起始行4，ABCD四列
exports.readDataFromDir = function(dir) {
  const startRow = 4
  // 读取excel中sheet数据，合并成一个数组，返回数据类型：
  // [
  //  [ 20929393, '张三', '开发', 10, './samples/20174001.xlsx' ],
  //  [ 20925556, '张三', '开发', 10, './samples/20174001.xlsx' ],
  //  ...,
  //  [ 20929393, '张三', '开发', 10, './samples/20174002.xlsx' ],
  //  [ 20925556, '张三', '开发', 10, './samples/20174002.xlsx' ],
  //  ...
  // ]
  const data = R.pipe(
    R.filter(R.test(/\.xlsx$/)),                                  // 读取目录，过滤掉非xlsx文件
    R.map(R.concat(dir)),                                         // 拼接目录与文件名 ./samples/xxx.xlsx
    R.map(path => [path, XLSX.readFile(path)]),                   // 转换文件为 workbook
    R.map(([path, wb]) => [path, wb.Sheets[wb.SheetNames[1]]]),   // 建立path与workbook的关系，后续读取数据需要使用path
    R.map(([path, sheet]) => getSheetData(sheet, path)),          // 读取每个sheet中符合要求求的数据
    R.unnest,                                                     // 合并多个sheet的数据到一个数组中
  )(fs.readdirSync(dir))

  // 为读取的数据追加位置信息，返回数据类型：
  // {
  //   A4: { v: 20929393 },
  //   B4: { v: '张三' },
  //   C4: { v: '开发' },
  //   D4: { v: 10 },
  //   E4: { v: './samples/20174001.xlsx' },
  //   ...,
  //   A6: { v: 20929887 },
  //   B6: { v: '里斯' },
  //   C6: { v: '测试' },
  //   D6: { v: 10 },
  //   E6: { v: './samples/20174001.xlsx' },
  //   ...
  // }
  return R.pipe(
    R.map(R.zipObj(['A', 'B', 'C', 'D', 'E'])),                             // 每一列添加对应的Excel列名称: ABCD...
    mapIndexed((val, idx) => mapKeys(col => col + (idx + startRow))(val)),  // 列名称添加行号，从startRow开始
    R.mergeAll,                                                             // 合并到一个对象
    R.map(val => ({ v: val})),                                              // 返回Excel写入需要的格式
  )(data)
}
